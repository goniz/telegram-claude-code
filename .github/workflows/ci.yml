name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-rust:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Rust
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        toolchain: stable
        
    - name: Build
      run: cargo build --verbose
      
    - name: Test
      run: cargo test --verbose

  build-docker:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      run: docker build .

  test-docker-compose:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Create test environment file
      run: |
        echo "TELOXIDE_TOKEN=test_token_for_ci" > .env
        echo "RUST_LOG=info" >> .env
        
    - name: Validate Docker Compose syntax
      run: docker compose config --quiet
      
    - name: Validate Docker Compose file structure
      run: |
        # Check that key sections exist and are properly configured
        docker compose config | grep -q "telegram-bot"
        docker compose config | grep -q "volumes"
        docker compose config | grep -q "healthcheck"
        docker compose config | grep -q "environment"
        echo "✅ Docker Compose structure validation passed"
        
    - name: Build services with Docker Compose (with retries)
      run: |
        # Attempt to build with retries for network issues
        for i in 1 2 3; do
          echo "Build attempt $i..."
          if docker compose build; then
            echo "✅ Build succeeded on attempt $i"
            break
          else
            if [ $i -eq 3 ]; then
              echo "❌ Build failed after 3 attempts"
              echo "This might be due to network/SSL issues in CI environment"
              echo "Checking if image can be built with docker build..."
              if docker build . --no-cache --progress=plain; then
                echo "✅ Direct docker build succeeded"
              else
                echo "❌ Both docker compose and docker build failed"
                exit 1
              fi
            else
              echo "⚠️ Build attempt $i failed, retrying..."
              sleep 10
            fi
          fi
        done
        
    - name: Test basic docker-compose operations
      run: |
        # Test that compose can parse and validate the configuration
        echo "Testing docker-compose configuration..."
        docker compose config --services | grep -q telegram-bot
        echo "✅ Service configuration validation passed"
        
        # Test environment variable substitution
        if docker compose config | grep -q "test_token_for_ci"; then
          echo "✅ Environment variable substitution working"
        else
          echo "❌ Environment variable substitution failed"
          exit 1
        fi
        
    - name: Cleanup
      run: docker compose down --volumes --rmi local
      if: always()

  push-docker:
    runs-on: ubuntu-latest
    needs: [build-rust, build-docker, test-docker-compose]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}