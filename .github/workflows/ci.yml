name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-rust:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Rust
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        toolchain: stable
        
    - name: Build
      run: cargo build --verbose
      
    - name: Test
      run: cargo test --verbose

  build-docker:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      run: docker build .

  test-docker-compose:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Create test environment file
      run: |
        echo "TELOXIDE_TOKEN=test_token_for_ci" > .env
        echo "RUST_LOG=info" >> .env
        
    - name: Validate Docker Compose syntax
      run: docker compose config --quiet
      
    - name: Build services with Docker Compose
      run: docker compose build
      
    - name: Start services for integration testing
      run: |
        docker compose up -d
        sleep 10
        
    - name: Check service health and logs
      run: |
        docker compose ps
        docker compose logs telegram-bot
        # Verify the container started (even if it exits due to invalid token)
        docker compose ps --format "table {{.Service}}\t{{.Status}}" | grep telegram-bot
        
    - name: Tear down services
      run: docker compose down --volumes
      if: always()

  push-docker:
    runs-on: ubuntu-latest
    needs: [build-rust, build-docker, test-docker-compose]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}