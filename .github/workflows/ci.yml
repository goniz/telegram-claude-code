name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Rust
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        toolchain: stable
      
    - name: Test
      run: cargo test --verbose -- --nocapture

  docker:
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          # Main image builds
          - platform: linux/amd64
            runner: ubuntu-24.04
            platform_tag: amd64
            image_name: main
            dockerfile: Dockerfile
            suffix: ""
          - platform: linux/arm64
            runner: ubuntu-24.04-arm
            platform_tag: arm64
            image_name: main
            dockerfile: Dockerfile
            suffix: ""
          # Runtime image builds
          - platform: linux/amd64
            runner: ubuntu-24.04
            platform_tag: amd64
            image_name: runtime
            dockerfile: Dockerfile.runtime
            suffix: "-runtime"
          - platform: linux/arm64
            runner: ubuntu-24.04-arm
            platform_tag: arm64
            image_name: runtime
            dockerfile: Dockerfile.runtime
            suffix: "-runtime"
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}${{ matrix.suffix }}
        tags: |
          type=ref,event=branch,suffix=-${{ matrix.platform_tag }}
          type=sha,suffix=-${{ matrix.platform_tag }}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        file: ${{ matrix.dockerfile }}
        platforms: ${{ matrix.platform }}
        push: ${{ github.ref == 'refs/heads/main' && github.event_name == 'push' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=registry,ref=ghcr.io/${{ github.repository }}${{ matrix.suffix }}-cache:${{ matrix.platform_tag }}
        cache-to: type=registry,ref=ghcr.io/${{ github.repository }}${{ matrix.suffix }}-cache:${{ matrix.platform_tag }},mode=max

  docker-manifest:
    runs-on: ubuntu-24.04
    needs: docker
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    strategy:
      matrix:
        image:
          - name: main
            suffix: ""
          - name: runtime
            suffix: "-runtime"
    
    steps:
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}${{ matrix.image.suffix }}
        tags: |
          type=ref,event=branch
          type=sha
          
    - name: Create and push manifest
      run: |
        echo "Tags to create manifests for:"
        echo '${{ steps.meta.outputs.tags }}'
        
        for tag in $(echo '${{ steps.meta.outputs.tags }}' | tr '\n' ' '); do
          echo "Creating manifest for: ${tag}"
          
          # Extract tag part (everything after the colon)
          tag_part=$(echo ${tag} | sed 's/^.*://')
          base_repo="ghcr.io/${{ github.repository }}${{ matrix.image.suffix }}"
          
          echo "Looking for platform images: ${base_repo}:${tag_part}-amd64 and ${base_repo}:${tag_part}-arm64"
          
          docker buildx imagetools create \
            --tag ${tag} \
            ${base_repo}:${tag_part}-amd64 \
            ${base_repo}:${tag_part}-arm64
        done

  test-docker-compose:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Create test environment file
      run: |
        echo "TELOXIDE_TOKEN=${{ secrets.STAGING_TOKEN }}" > .env
        echo "RUST_LOG=info" >> .env
        
    - name: Validate Docker Compose syntax
      run: docker compose config --quiet
      
    - name: Test Docker Compose up
      run: |
        echo "Testing docker compose up with staging token..."
        # Use --wait to wait for services to be healthy
        if docker compose up -d --wait; then
          echo "✅ Container started successfully and is healthy"
          
          # Output service logs for debugging
          echo "=== Service Logs ==="
          docker compose logs
          
          # Cleanup
          docker compose down --volumes
        else
          echo "❌ Container failed to start or become healthy"
          echo "=== Service Logs (for debugging) ==="
          docker compose logs || echo "Could not retrieve logs"
          docker compose down --volumes || echo "Cleanup failed"
          exit 1
        fi
        
    - name: Upload logs artifact on failure
      if: failure()
      run: |
        echo "=== Archiving logs due to failure ==="
        # Attempt to capture any remaining logs and system state
        docker compose logs > docker-compose-logs.txt 2>&1 || echo "Failed to capture compose logs" > docker-compose-logs.txt
        docker ps -a >> docker-compose-logs.txt 2>&1 || echo "Failed to capture container state" >> docker-compose-logs.txt
        
    - name: Upload logs artifact
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: docker-compose-logs
        path: docker-compose-logs.txt
        retention-days: 7

